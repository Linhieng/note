# 基础，但易忘（笔试面试）

<!------------------------------------------------------------------------------------>
<!------------------------------------------------------------------------------------>
<!------------------------------------------------------------------------------------>
<!------------------------------------------------------------------------------------>
<!------------------------------------------------------------------------------------>
<!------------------------------------------------------------------------------------>
<!------------------------------------------------------------------------------------>
<!------------------------------------------------------------------------------------>
<!------------------------------------------------------------------------------------>

> 注意：
> 虽然 ECMAScript 中的所有数值都以 IEEE 754 64 位格式存储，但位操作并不直接应用到 64 位，而是先把数值转换为 32 位整数，再进行位操作，操作完成后再把结果转换为 64 位。所以，对我们（开发者）而言，就好像只有 32 位整数一样。

```js
        let n1 = 0b1_0000_0000_0000
        console.log(n1.toString(2)) // 1_0000_0000_0000
        n1 <<= 1
        console.log(n1.toString(2)) // 10_0000_0000_0000


        let n2 = 0b1_0000_0000_0000_0000_0000_0000_0000_0000 // 33 位
        console.log(n2.toString(2)) // 1_0000_0000_0000_0000_0000_0000_0000_0000
        n2 <<= 1
        console.log(n2.toString(2)) // 0
        // 因为位运算只能操作 32 位，所以在 64 --> 32 --> 64 过程中精度丢失了！
```



## 二进制的有符号和无符号右移

    有符号右移：除了符号位（第32位），所有位都右移。空出来的位置填充对应符号位。所以正数右移永远成正数，负数右移永远是负数

## 负数的二进制存储方式

    在计算机中以补码的形式存储负数。
    补码的计算方式是：对正数的二进制进行所有位取反，然后加一
    比如 -27 的二进制（补码）就是 27 取反加一

```js
           0000 0000 0000 0000 0000 0000 0001 1011 (27)
        ~  1111 1111 1111 1111 1111 1111 1110 0100
        ++ 1111 1111 1111 1111 1111 1111 1110 0101 (-27)
```
    对于负数，计算其二进制值的方式也是一样的：取反，加一

```js
           1111 1111 1111 1111 1111 1111 1110 0101 (-27)
        ~  0000 0000 0000 0000 0000 0000 0001 1010
        ++ 0000 0000 0000 0000 0000 0000 0001 1011 (27)
                                                   然后在前面加个负号
```

    JS 打印负数的二进制时，并不是以补码形式打印出来的，而是以人类易读的方式打印出来的，比如
```js
        Number(-27).toString(2) // 打印 -1 1011
        Number.parseInt('-11011', 2) // 得到负数 -27
```

## JS 中的相关位运算

    & 与运算（全 1）

    | 或运算（有 1）

    ~ 非运算（取反）

    ^ 异或运算（相加）

    << 左移（补零）

    >> 右移（补符号位）

    >>> 无符号右移（补零）


    ~ 非运算可以用于对数字进行向下取整：
          console.log(~~1.1);
          console.log(~~1.9);
          console.log(~~'1.9');
          console.log(~~'1.1');

    为什么说右移是补符号位呢？我们还是拿前面的 -27 举例。
    首先，-27 在计算机中的二进制存储是这样的：
        1111 1111 1111 1111 1111 1111 1110 0101
    而当我们对 -27 进行有符号左移时，它的最右侧的 1 会消失，同时最左侧会空出一个位置
        _111 1111 1111 1111 1111 1111 1111 0010 ~1~
    那么这个位置需要补什么呢？答案是符号位，由于我们是负数，所以它会补上 1
    所以结果就是
        1111 1111 1111 1111 1111 1111 1111 0010
    这个数字转换为十进制就是 -14。为什么这个二进制是 -14 呢？当然是我们算出来的。
    计算方法前面已经讲过了，不过这里会再讲一次：

```js
           1111 1111 1111 1111 1111 1111 1111 0010 (某个数字的补码形式)
        ~  0000 0000 0000 0000 0000 0000 0000 1101 (对其取反)
        ++ 0000 0000 0000 0000 0000 0000 0000 1110 (然后加一，得到 14)
                                                   在前面加个负号
                                                   就得到 -14 了
                                                   所以我们知道这个补码
                                                   的十进制是 -14
```
    既然有符号右移都说了，那再说说无符号右移的。
    还是拿 -27 举例，步骤是一样的。
    首先，-27 在计算机中的二进制存储是这样的：
        1111 1111 1111 1111 1111 1111 1110 0101
    而当我们对 -27 进行有符号左移时，它的最右侧的 1 会消失，同时最左侧会空出一个位置
        _111 1111 1111 1111 1111 1111 1111 0010 ~1~
    那么这个位置需要补什么呢？答案是 0，无论是正数还是负数，都会补上 0
    所以，结果会是
        0111 1111 1111 1111 1111 1111 1111 0010
    而这个数字自己计算一下，就知道是二进制的 2147483634
    自己在 js 中运行一下，就可以知道答案

```js
        console.log(-27 >>> 1) // 输出 2147483634
```

## 以 & 运算为例

    正数 & 正数
```js
          00000000000000000000000000000011  (3)
        & 00000000000000000000000000011001  (25)
        -----------------------------------
          00000000000000000000000000000001  (1)
```
    正数 & 负数
```js
          00000000000000000000000000000011  (3)
        & 11111111111111111111111111100111  (-25)
        -----------------------------------
          00000000000000000000000000000011  (3)
```
    负数 & 正数
```js
          11111111111111111111111111111101  (-3)
        & 00000000000000000000000000011001  (25)
        -----------------------------------
          00000000000000000000000000011001  (25)
```
    负数 & 负数
```js
          11111111111111111111111111111101  (-3)
        & 11111111111111111111111111100111  (-25)
        -----------------------------------
          11111111111111111111111111100101  (-27)
```


<!------------------------------------------------------------------------------------>
<!------------------------------------------------------------------------------------>
<!------------------------------------------------------------------------------------>
<!------------------------------------------------------------------------------------>
<!------------------------------------------------------------------------------------>
<!------------------------------------------------------------------------------------>
<!------------------------------------------------------------------------------------>
<!------------------------------------------------------------------------------------>
<!------------------------------------------------------------------------------------>
上下文/执行上下文/作用域、作用域链


## 上下文

        - 变量或函数的上下文决定了它们可以访问哪些属性
        - 每个上下文都有一个关联的变量对象，虽然无法通过变量访问到它，但后台处理数据时会用到它。
        - 每个函数都有自己的上下文，调用一个函数时，其上下文就会被推入到一个上下文栈中。
        - 浏览器中的全局上下文是 window
        - 上下文中的所有代码执行完毕后，上下文会被销毁（包括在该上下文中定义的所有变量和函数）
        - 全局上下文 window 只有当应用程序退出时才会报销毁（比如关闭网页或浏览器）
        - 函数作用域中默认有一个定义变量 arguments（全局上下文中没有）

## 作用域有：

        - 全局作用域 (window)
        - 函数作用域 (var)
        - 块级作用域 (let,const)

## 作用域链

        - 因为作用域可以嵌套，所以就有了作用域链这个概念。
        - 作用域链指的是在词法作用域中变量查找的机制。
        - 子级可以访问父级，父级不能访问子级。
        - 函数上下文中可以访问到全局上下文中的变量，是因为可以在作用域链中找到它。


---

虽然执行上下文主要有两种

        - 全局上下文
        - 函数上下文。eval() 调用内部存在第三种上下文

但某些语句可以增加作用域链

        - try/catch 中的 catch 块：会创建一个 err，err 对象中会包含要抛出的错误对象。
        - with 语句：可以在作用域前面添加临时添加一个上下文

```js
        (() => {
            var protocol = 'ftp'
            // 通过 with 临时添加一个 location 上下文
            with(location) {
                // 这样就可以通过上下文找到 protocol, hostname, port 变量。
                console.log(protocol, hostname, port) // http
            }
            console.log(protocol) // ftp
        })();
```

```js
        (() => {
            var protocol = 'ftp'
            with(location) {
                // 在代码在 firefox 和 chrome 中都是无效果的
                // 但在 edge 中将会刷新页面。原因是 edge 都支持修改 location.protocol，
                // 但 firefox 和 chrome 不支持修改为 hello 这个无效值
                // 如果更改为 var protocol = 'http' ，则 firefox 和 chrome 也会刷新
                var protocol = 'hello'
                console.log(protocol, hostname, port) // https
            }
            console.log(protocol) // ftp
        })();
```
