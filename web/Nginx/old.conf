# 这个文件是作为 “学习 nginx ” 的过渡产品。有什么需要的在这里看。新学了什么也写在这里。等到积累的够多时，再重构它
# 2022-08-26 22:49

# 阅读官方文档 http://nginx.org/en/docs/

# 这里是全局配置

# 不懂 nginx 是啥。
user nginx;

# nginx 调用的工作进程数量
worker_processes auto;

# 错误日志的输出位置
error_log /var/log/nginx/error.log;

# 指定 pid 文件存放的路径
pid /run/nginx.pid;

# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

events {
    # 这里是 events 全局块。 events 块涉及的指令主要影响Nginx服务器与用户的网络连接
    # nginx 一个工作进程的最大连接数量
    worker_connections 1024;
}

http {
    # http 全局块

    # 指定日志内容格式
        # $remote_addr: 用以记录客户端的ip地址；
        # $remote_user ：用来记录客户端用户名称；
        # $time_local ： 用来记录访问时间与时区；
        # $request ： 用来记录请求的url与http协议；
        # $status ： 用来记录请求状态；成功是200，
        # $body_bytes_sent ：记录发送给客户端文件主体内容大小；
        # $http_referer ：用来记录从那个页面链接访问过来的；
        # $http_user_agent ：记录客户浏览器的相关信息；
        # $http_x_forwarded_for ：用以记录客户端的ip地址(从请求头中获取的）；
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    # 指定日志文件所在位置
    access_log  /var/log/nginx/access.log  main;

    # （不懂）
    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 2048;

    # 导入其他配置文件, 文件扩展名与文件类型映射表（不太懂）
    include             /etc/nginx/mime.types;

    # 默认文件类型，如果不加此指令，默认值为text/plain。
    default_type        application/octet-stream;

    # 从 /etc/nginx/conf.d 目录下加载配置文件
    include /etc/nginx/conf.d/*.conf;

    server {
        # 监听端口号, 80 等同于 *:80 代表监听来自所有 IP 的 80 端口号
        listen          80;
        # 指定了去哪里找请求的资源。（请求 itaem.cn/ 时，后面省略了 /index.html，所以默认会去找 /usr/80/index.html 文件）
	    root            /usr/80;
    }
    server {
        listen          443;
        root            /usr/443;

        # 这三项用于配置 https 证书
        ssl                     on;
        ssl_certificate         /.keys/cert.pem;
        ssl_certificate_key     /.keys/key.key;

    }
    server {
        listen		8001;

        # ~ 代表正则匹配
        location ~ /(js|css)/.* {
            root /usr/8001/;
            # $uri 代表 location 匹配到的内容
            try_files $uri 404;
        }
        location ~ /page/.* {
            root /usr/8001;
            # 注意 /index.html 的 / 符号不能省略
            try_files  /index.html 404;
	    }
        # 不加匹配参数，默认是 ~
        location / {
            # 反向代理, 将接收到的请求转给 http://127.0.0.1:10001 进行处理
            proxy_pass	http://127.0.0.1:10001;
            # proxy_set_header 反向代理时, 设置请求头（添加或修改）
            proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header    X-Real-IP $remote_addr;
        }
    }
    server {
        listen		8081;

        location / {
            root /usr/8081;
            try_files $uri $uri/ /index.html;
        }
        location = /fill-in/ {
            root /usr/8081;
            try_files /index.html /index.html;
        }
        location /fill-in/ {
            root /usr/8081;
            try_files $uri $uri/ /fill-in.html;
        }
    }
    server {
        listen    39100;
        root    /usr/dist;

	    # 高德地图 Web服务API 代理
        location /_AMapService/ {
            # 修改 $args 变量, 往后面添加一个参数，然后转发给 https://restapi.amap.com
            set $args "$args&jscode=xxxxxxxxxxxxxxxxxxxxxxxx";
            proxy_pass https://restapi.amap.com/;
        }

        # 当出现 404 时, 修改 location 为 /404.html 这样就会被 location = /40x.html 识别
        error_page 404 /404.html;
        location = /40x.html { }

        # 同理，当出现 500 502 503 504，跳到 location = /50x.html
        error_page 500 502 503 504 /50x.html;
        location = /50x.html { }
    }


}
